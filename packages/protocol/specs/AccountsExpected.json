{
	"rules": {
		"address_cant_be_both_authorizedby_of_two_address": {
			"SUCCESS": ["_getValidatorSigner(address)", "getName(address)", "getWalletAddress(address)", "hasAuthorizedValidatorSigner(address)", "authorizeValidatorSignerWithPublicKey(address,uint8,bytes32,bytes32,bytes)", "setAccountDataEncryptionKey(bytes)", "removeVoteSigner()", "initialized()", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "renounceOwnership()", "hasAuthorizedVoteSigner(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "setMetadataURL(string)", "removeAttestationSigner()", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "getMetadataURL(address)", "init_state()", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "removeValidatorSigner()", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "hasAuthorizedAttestationSigner(address)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"address_can_authorize_two_address": {
			"SUCCESS": ["_getValidatorSigner(address)", "getName(address)", "getWalletAddress(address)", "hasAuthorizedValidatorSigner(address)", "authorizeValidatorSignerWithPublicKey(address,uint8,bytes32,bytes32,bytes)", "setAccountDataEncryptionKey(bytes)", "removeVoteSigner()", "initialized()", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "renounceOwnership()", "hasAuthorizedVoteSigner(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "setMetadataURL(string)", "removeAttestationSigner()", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "getMetadataURL(address)", "init_state()", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "removeValidatorSigner()", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "hasAuthorizedAttestationSigner(address)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"authorizedBy_can_not_be_removed": {
			"SUCCESS": ["_getValidatorSigner(address)", "getName(address)", "getWalletAddress(address)", "hasAuthorizedValidatorSigner(address)", "authorizeValidatorSignerWithPublicKey(address,uint8,bytes32,bytes32,bytes)", "setAccountDataEncryptionKey(bytes)", "removeVoteSigner()", "initialized()", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "renounceOwnership()", "hasAuthorizedVoteSigner(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "setMetadataURL(string)", "removeAttestationSigner()", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "getMetadataURL(address)", "init_state()", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "removeValidatorSigner()", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "hasAuthorizedAttestationSigner(address)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"account_empty_if_not_exist_preserve": {
			"SUCCESS": ["_getValidatorSigner(address)", "getName(address)", "getWalletAddress(address)", "hasAuthorizedValidatorSigner(address)", "authorizeValidatorSignerWithPublicKey(address,uint8,bytes32,bytes32,bytes)", "setAccountDataEncryptionKey(bytes)", "removeVoteSigner()", "initialized()", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "renounceOwnership()", "hasAuthorizedVoteSigner(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "setMetadataURL(string)", "removeAttestationSigner()", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "getMetadataURL(address)", "init_state()", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "removeValidatorSigner()", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "hasAuthorizedAttestationSigner(address)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"account_empty_if_not_exist_instate": "SUCCESS",
		"address_cant_be_both_account_and_signer_preserve": {
			"SUCCESS": ["_getValidatorSigner(address)", "getName(address)", "getWalletAddress(address)", "hasAuthorizedValidatorSigner(address)", "authorizeValidatorSignerWithPublicKey(address,uint8,bytes32,bytes32,bytes)", "setAccountDataEncryptionKey(bytes)", "removeVoteSigner()", "initialized()", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "renounceOwnership()", "hasAuthorizedVoteSigner(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "setMetadataURL(string)", "removeAttestationSigner()", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "getMetadataURL(address)", "init_state()", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "removeValidatorSigner()", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "hasAuthorizedAttestationSigner(address)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"address_cant_be_both_account_and_signer_instate": "SUCCESS",
		"address_signer_if_authorizedby_preserve": {
			"SUCCESS": ["_getValidatorSigner(address)", "getName(address)", "getWalletAddress(address)", "hasAuthorizedValidatorSigner(address)", "authorizeValidatorSignerWithPublicKey(address,uint8,bytes32,bytes32,bytes)", "setAccountDataEncryptionKey(bytes)", "removeVoteSigner()", "initialized()", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "renounceOwnership()", "hasAuthorizedVoteSigner(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "setMetadataURL(string)", "removeAttestationSigner()", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "getMetadataURL(address)", "init_state()", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "removeValidatorSigner()", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "hasAuthorizedAttestationSigner(address)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"address_signer_if_authorizedby_instate": "SUCCESS",
		"envfreeFuncsAreNonpayable": {
			"SUCCESS": ["_getValidatorSigner(address)", "getWalletAddress(address)", "isAccount(address)", "_getVoteSigner(address)", "_getAttestationSigner(address)", "_getAuthorizedBy(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"envfreeFuncsStaticCheck": {
			"SUCCESS": ["isAccount(address)", "_getAuthorizedBy(address)", "getWalletAddress(address)", "_getAttestationSigner(address)", "_getVoteSigner(address)", "_getValidatorSigner(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		}
	},

	"assertMessages": {

	}
}